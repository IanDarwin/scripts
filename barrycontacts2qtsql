#!/usr/bin/env python

# $Id$

# convert entries like this, to QTopia via SQLite
# (this input was produced from my Blackberry(tm), using the wonderful
# "barry" program by Chris Frey (http://www.netdirect.ca/software/packages/barry/)
#
#Contact: 0xffffffff (0)
#    FirstName           : Aaron
#    LastName            : Smiteh
#    Email               : smiteme@ersofpafr.com
#    WorkPhone           : 1-800-555-1212
#    Company             : A & M Codecraft
#    WorkAddress1        : 456 Main St
#    WorkCity            : Bytown
#    WorkProvince        : ON
#    UserDefined1        : 24 S 2nd exit over 401 left on Main 3km
#
# For a full list of the fields in $1, do "make tagslist" (or see "dump" below)
#
# Information on the SQL schema was introspected using sqlitebrowser.

import re,sys

def reset_entry():
	""" make sure all possible keys exist, so we don't have to check 'em later """
	global entry
	entry = { 
	"FirstName":"", "LastName":"", 
	"Company":"", "JobTitle":"", 
	"HomePhone":"", "HomePhone2":"", "WorkPhone":"", "WorkPhone2":"",
	"Fax":"", "MobilePhone":"", "Email":"", "URL":"", "Categories":"",
	"HomeAddress1":"", "HomeAddress2":"", "HomeCity":"", 
	"HomeProvince":"", "HomePostalCode":"", "HomeCountry":"",
	"WorkAddress1":"", "WorkAddress2":"", "WorkCity":"", 
	"WorkPostalCode":"", "WorkProvince":"", "WorkCountry":"",
	"Notes":"", "UserDefined1":"", 
	}


def doCategory(cat):
	""" get the number for the given category, maintaining a map categories \
		mapping name to catId; \
		returns the category number \
	"""
	if (cat == "" or cat == "Unfiled"):
		return 0;
	if (not categories.setdefault(cat)):
		print "insert into categories(catid,name) values(%d, %s)" % (++catId, sqlEscape(cat))
		categories[cat]=catId
	return categories[cat];

def sqlEscape(arg):
	""" return "null" for empty string, double up single 
		quotes ("O''Reilly"), and surround in single quotes for SQL. """
	if (not arg or arg == ""):
		return "null";
	# gsub(/'/, "&&", arg)
	arg = arg.replace(r"'", r"''")
	return "'" + arg + "'"

def dodump():
	""" Do all the outputting of SQL for one Contact """
	firstName = entry["FirstName"]
	lastName = entry["LastName"]
	company = entry["Company"]
	print "-- Entry for", recId, firstName, lastName, "--", company

	name = (firstName + " " + lastName).strip()
	if (not name):
		name = company
	if (name.strip() == ""):
		name = recId

	homePhone1=entry["HomePhone"]
	homePhone2=entry["HomePhone2"]
	workPhone1 = entry["WorkPhone"]
	workPhone2 = entry["WorkPhone2"]
	faxNumber = entry["Fax"]
	cellPhone = entry["MobilePhone"]
	defaultPhone = ""
	if (homePhone1):
		defaultPhone = homePhone1;
	elif (cellPhone):
		defaultPhone = cellPhone;
	elif (workPhone1):
		defaultPhone = workPhone1;

	default_email =  entry["Email"]
	b_webpage = entry["URL"]
	cat = doCategory(entry["Categories"]);
	notes = (entry["Notes"] + " " + entry["UserDefined1"]).strip()
	jobTitle = entry["JobTitle"]

	print "insert into contacts(recid, firstname, lastname, company, default_email, default_Phone, b_webpage, jobTitle, context ) values(%d, %s, %s, %s, %s, %s, %s, %s, %d);" % (
		recId, sqlEscape(firstName), sqlEscape(lastName), sqlEscape(company), 
		sqlEscape(default_email), sqlEscape(defaultPhone), sqlEscape(b_webpage), 
		sqlEscape(jobTitle), 1)

	# all phones (including default) go into contactphonenumbers
	PHONE_FMT = "insert into contactphonenumbers(recid, phone_number, phone_type) values(%d, %s, %d);"
	if (homePhone1): print PHONE_FMT % ( recId, sqlEscape(homePhone1), 1)
	if (homePhone2): print PHONE_FMT % ( recId, sqlEscape(homePhone2), 1)
	if (workPhone1): print PHONE_FMT % ( recId, sqlEscape(workPhone1), 2)
	if (workPhone2): print PHONE_FMT % ( recId, sqlEscape(workPhone2), 2)
	if (cellPhone): print PHONE_FMT % ( recId, sqlEscape(cellPhone), 257)
	if (faxNumber): print PHONE_FMT % ( recId, sqlEscape(faxNumber), 258) # XXX

	# HomeAddress goes into contactAddresses
	homeAddress1 = entry["HomeAddress1"]
	homeAddress2 = entry["HomeAddress2"]
	homeCity = entry["HomeCity"]
	homeProvince = entry["HomeProvince"]
	homePostalCode = entry["HomePostalCode"]
	homeCountry = entry["HomeCountry"]
	if (homeAddress1 or homeCity):
		print "insert into contactaddresses(recid, addresstype, street, city, state, zip, country)"
		print "\tvalues(%d, %d, %s, %s, %s, %s, %s);" % ( recId, 1, 
			sqlEscape((homeAddress1 + " " + homeAddress2).strip()),
		sqlEscape(homeCity), sqlEscape(homeProvince), 
			sqlEscape(homePostalCode), sqlEscape(homeCountry));

	# work address also goes into contactAddresses
	workAddress1 = entry["WorkAddress1"]
	workAddress2 = entry["WorkAddress2"]
	workCity = entry["WorkCity"]
	workPostalCode = entry["WorkPostalCode"]
	workProvince = entry["WorkProvince"]
	workCountry = entry["WorkCountry"]
	if (workAddress1 or workCity):
		print "insert into contactaddresses(recid, addresstype, street, city, state, zip, country)"
		print "\tvalues(%d,%d, %s, %s, %s, %s, %s);" % ( recId, 2, 
			sqlEscape((workAddress1 + " " + workAddress2).strip()),
			sqlEscape(workCity), sqlEscape(workProvince), 
			sqlEscape(workPostalCode), sqlEscape(workCountry));

#
# Main script...

catId = 0
categories={}
reset_entry()

for line in sys.stdin:
		line = line[:-1]
		if (line == ""):			# end of an old contact, output it.
			dodump();
			print ""
			reset_entry()
			continue
		x = line.split()
		if (x[0] == "Contact:"):	# start of a new contact
			x[1] = x[1].strip()
			recId = int(x[1], 16)
			continue
		# else "normal" case - "  FirstName : Ian"
		if (len(x) == 2): x.append("")
		rest = " ".join(x[2:]).strip()
		# print "DEBUG: ", x[0], "-->", rest
		entry[x[0].strip()] = rest
