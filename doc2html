#!/usr/bin/awk -f

# This script reads in text which is structured only by indentation
# and light markup, and turns it into HTML
# $Id$

# For example,
# Slide One
#	Major point
#		Minor item
#	Another Major
#		Minor
# Slide Two
#	Major point
#		Minor item
BEGIN {
	TOCFILE="index.html"
	# if (getline < TOCFILE) {
	# 	print TOCFILE "already exists!"
	# 	exit 1
	# }
	FILENAMETEMPLATE = "page%02d.html"
	insource = 0;
}

NR == 1	{
	SHOWTITLE=$0
	print "<HTML>" >TOCFILE
	print "<!-- made by $Id$" >TOCFILE
	print " -->" >TOCFILE
	print "<TITLE>" SHOWTITLE ": Table of Content</TITLE>" >TOCFILE
	mkTable(TOCFILE, "", TOCFILE, TOCFILE, sprintf(FILENAMETEMPLATE, 1));
	print "<H1 ALIGN=CENTER>" SHOWTITLE ": Table of Content</H1>" >TOCFILE
	print "<OL>" >TOCFILE
	next
	}

# quietly ignore null lines
/^$/	{ next; }

# Make a text line into a String, with substitutions
function mkTextStr(line)
{
	# Turn _stuff_ into (simplified) <italic>stuff<noitalic>
	while (index(line, "_")) {
		sub("_", "<I>", line)
		sub("_", "</I>", line)
	}

	# Turn //stuff// into (simplified) <Courier>stuff<Helvetica>
	while (match(line, /\/\//)) {
		sub("//", "<KBD>", line)
		sub("//", "</KBD>", line)
	}

	return line
}

function para(tag, line)
{
		printf "%s", "<" tag ">" >OUTFILE
		if (tag == "H4") n = 12;
		else if (tag == "H3") n = 8;
		else if (tag == "H2") n = 4;
		else n = 0;
		for (i=0; i<n; i++)
			printf "%s", "&nbsp;" >OUTFILE
		printf "%s", line >OUTFILE
		print "</" tag ">" >OUTFILE
}

#		Next three cases for .((Source ... lines ... .))Source
$1 == ".((Source" {
		if (inSource)
			print "Warning: Unmatched ((Source at line", FNR
		inSource = 1;
		print "<PRE>" > OUTFILE
		next
		}
$1 == ".))Source" {
		if (!inSource)
			print "Warning: Unmatched ))Source at line", FNR
		inSource = 0
		print "</PRE>" >OUTFILE
		next
		}

inSource == 1	{
		print
		next
		}

function mkTable(outFile, pageInd, prev,ind,nxt) {
		print "<TABLE BGCOLOR=#CC0000 WIDTH=100%>" >outFile
		print "<TR>" >outFile
		print "<TD ALIGN=CENTER ID=Nav><A HREF=" prev ">&lt;&lt; Back</A>" >outFile
		print "<TD ALIGN=CENTER ID=Nav><A HREF=" ind ">INDEX</A>" >outFile
		print "<TD ALIGN=CENTER ID=Nav><A HREF=" nxt ">Next &gt;&gt;</A>" >outFile
		print "</TR>" >outFile
		print "<TR><TD><TD ALIGN=CENTER ID=Nav>" pageInd "<TD></TR>" >outFile
		print "</TABLE>" >outFile
}

# Graphics -- must come before "START NEW SLIDE"
$1 == "=" {
		print "<IMG SRC=\"" $2 "\"></IMG>" >OUTFILE
		next;
		}

# START NEW SLIDE -- undented
$0 !~ "^\t"	{
		OLDFILE = OUTFILE
		if (OUTFILE != "")
			close(OUTFILE);
		OUTFILE = sprintf(FILENAMETEMPLATE,++pageNum)
		printf "%d ", pageNum
		print "<LI><A HREF=\"" OUTFILE "\">" $0 "</A></LI>" > TOCFILE
		print "<HTML>" >OUTFILE
		print "<HEAD>" >OUTFILE
		print "<TITLE>" $0 "</TITLE>" >OUTFILE
		print "<LINK REL=\"stylesheet\" TYPE=\"text/css\" HREF=\"stylesheet.css\" TITLE=\"Style\">" >OUTFILE
		print "<BODY BGCOLOR=WHITE>" >OUTFILE
		if (OLDFILE == "")
			OLDFILE = "index.html"
		mkTable(OUTFILE, "Page " pageNum, OLDFILE, TOCFILE, sprintf(FILENAMETEMPLATE,1+pageNum))
		print "<H1>" $0 "</H1>" >OUTFILE
		next
		}

#		Handle one-line shell commands outside of .((...))Source
#		Any number of tabs then "$ "; first tab -> <Source>, rest stay
$0 ~ /^\t+\$ /	{
		sub("\t", "")
		para("KBD", $0)
		next;
		}

$0 ~ "^\t\t\t"	{
		sub("^\t\t\t", "")
		pgftag = "H4"
		}
$0 ~ "^\t\t"	{
		sub("^\t\t", "")
		pgftag = "H3"
		}
$0 ~ "^\t"	{
		sub("^\t", "")
		pgftag = "H2"
		}

		# default case - print
		{
		para(pgftag, $0)
		}
END		{
		print ""
		if (inSource) {
			print "** ERROR: Unclosed Source ***"
		}
		OLDFILE = OUTFILE
		close(OUTFILE)
		OUTFILE = sprintf(FILENAMETEMPLATE, ++pageNum);
		print "<H1>/*EOF - " SHOWTITLE "</H1>"	>OUTFILE
		print "That is the end of the slide show named " >OUTFILE
		print "<I>" SHOWTITLE "</I>. Please go"	>OUTFILE
		print "<A HREF=" OLDFILE ">b a c k</A>."	>OUTFILE
		}
